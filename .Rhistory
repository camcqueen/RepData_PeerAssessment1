add2 <- function(x,y) {
x + y
}
add2(3,5)
above <- function(x,n) {
use <- x > n
x[use]
}
x <- 1:20
above(x,12)
above <- function(x,n = 10) {
use <- x > n
x[use]
}
above(x)
above(x,12)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
install.packages("dplyr")
library(dplyr)
##The package "dplyr" is necessary to complete this code. Please choose any CRAN mirror.
##Read zipped files into R memory assigning appropriate classes to the columns.
Activitydata <- read.csv("activity.csv",colClasses=c("numeric","character","character"))
##Change Activity date from character to date format and rejoin with original data.
AD_date <- Activitydata$date
date <- strptime(AD_date, format="%Y-%m-%d")
act_data <- cbind(Activitydata[,c(1,3)],date)
setwd("~/Coursera/Reproducible Research/RepData_PeerAssessment1")
install.packages("dplyr")
library(dplyr)
##The package "dplyr" is necessary to complete this code. Please choose any CRAN mirror.
##Read zipped files into R memory assigning appropriate classes to the columns.
Activitydata <- read.csv("activity.csv",colClasses=c("numeric","character","character"))
##Change Activity date from character to date format and rejoin with original data.
AD_date <- Activitydata$date
date <- strptime(AD_date, format="%Y-%m-%d")
act_data <- cbind(Activitydata[,c(1,3)],date)
act_data2 <- na.omit(act_data)
# aggregate steps by date to get total number of steps in a day
act_data_sum <- aggregate(steps ~ date, act_data2, sum)
# create histogram of total number of steps in a day
hist(act_data_sum$steps, col=1, main="Histogram of total number of steps per day",
xlab="Total number of steps in a day")
mean(act_data_sum$steps)
median(act_data_sum$steps)
act_data_interval <- aggregate(steps ~ interval, act_data2, mean)
with(act_data_interval, plot(interval, steps,, type = "l", main="Average steps by interval across all days", xlab = "Interval", ylab = "Steps"))
plot(act_data_interval$interval, act_data_interval$steps, type='l',
main="Average steps across all days", xlab="Interval",
ylab="steps")
nrow(act_data_interval)
act_data_interval
?sort
sort(act_data_interval)
?order
act_data_interval[order(act_data_interval$interval)]
act_data_interval[order(act_data_interval$interval),]
act_data_interval[order(act_data_interval$steps),]
head(Activitydata)
Activitydata <- read.csv("activity.csv",colClasses=c("numeric","character","numeric"))
AD_date <- Activitydata$date
date <- strptime(AD_date, format="%Y-%m-%d")
act_data <- cbind(Activitydata[,c(1,3)],date)
act_data2 <- na.omit(act_data)
act_data_sum <- aggregate(steps ~ date, act_data2, sum)
act_data_interval <- aggregate(steps ~ interval, act_data2, mean)
with(act_data_interval, plot(interval, steps,, type = "l", main="Average steps by interval across all days", xlab = "Interval", ylab = "Steps"))
# find row id of maximum average number of steps in an interval
row_id <- which.max(act_data_interval$steps)
# get the interval with maximum average number of steps in an interval
act_data_interval[row_id, ]
'''
;
''
act_data_NA <- act-data[!complete.cases(act_data),]
act_data_NA <- act_data[!complete.cases(act_data),]
nrow(act_data_NA)
for (i in 1:nrow(act_data)){
if (is.na(act_data$steps[i])){
interval_est <- act_data$interval[i]
row_id <- which(act_data_interval$interval == interval_est)
steps_est <- act_data_interval$steps[row_id]
act_data$steps[i] <- steps_est
}
}
act_data_imputation <- aggregate(steps ~ date, act_data, sum)
head(act_data_imputation)
hist(act_data_imputation$steps, main="Histogram of total number of steps per day with imputation for NAs", xlab="Total number of steps in a day")
hist(act_data_imputation$steps, main="Total Steps per day with imputation for NAs", xlab="Total steps in a day")
mean(act_data_imputation$steps)
median(act_data_imputation$steps)
act_data_day <- weekdays(act_data$date)
head(act_data_day)
tail(act_data_day)
act_data_day <- c("weekday")
head(act_data_day)
act_data_day <- weekdays(act_data$date)
?colNames
colName
act_data_day <- weekdays(act_data$date)
act_data_day <- make.names(weekdays)
act_data_day <- weekdays(act_data$date)
colnames(act_data_day) <- c("weekdays")
act_data_day <- weekdays(act_data$date)
head(act_data_day)
act_data_day <- weekdays(act_data$date)
head(act_data_day)
act_data_day_name <- c("weekday")
for (i in 1:nrow(act_data)){
if (act_data_day[i] == "Saturday" || act_data_day[i] == "Sunday"){
act_data_day_name[i] <- "weekend"
}
}
act_data_day_type <- as.factor(act_data_day_type)
act_data_day_name <- as.factor(act_data_day_name)
act_data_imputation <- aggregate(steps ~ interval+day_name, act_data, mean)
day <- weekdays(act_data$date)
type <- c("weekday")
day <- weekdays(act_data$date)
type <- c("weekday")
for (i in 1:nrow(act_data)){
if (day[i] == "Saturday" || day[i] == "Sunday"){
type[i] <- "weekend"
}
}
head(type)
head(act_data)
head(day)
act_data_day <- cbind(act_data,day)
head(act_data_day)
type <- c("weekday")
for (i in 1:nrow(act_data)){
if (day[i] == "Saturday" || day[i] == "Sunday"){
type[i] <- "weekend"
}
}
for (i in 1:nrow(act_data_day)){
if (day[i] == "Saturday" || day[i] == "Sunday"){
type[i] <- "weekend"
}
}
head(act_data_day)
act_data_day_type <- cbind(act_data_day,type)
act_data_day_type <- rbind(act_data_day,type)
head(act_data_day_type)
type <- c("weekday")
for (i in 1:nrow(act_data_day)){
if (day[i] == "Saturday" || day[i] == "Sunday"){
type[i] <- "weekend"
}
}
head(type)
day <- weekdays(act_data$date)
act_data_day <- cbind(act_data,day)
# add a new column called day type and initialize to weekday
type <- c("weekday")
# If day is Saturday or Sunday, make day_type as weekend
for (i in 1:nrow(act_data)){
if (day[i] == "Saturday" || day[i] == "Sunday"){
type[i] <- "weekend"
}
}
df$date <- act_data$date
# add a new column indicating day of the week
df$day <- weekdays(df$date)
df$date <- act_data$date
act_data$date <- act_data$date
act_data$day <- weekdays(act_data$date)
act_data$day_type <- c("weekday")
for (i in 1:nrow(act_data)){
if (act_data$day[i] == "Saturday" || act_data$day[i] == "Sunday"){
act_data$day_type[i] <- "weekend"
}
}
act_data$day_type <- as.factor(act_data$day_type)
new_interval_imputation <- aggregate(steps ~ interval+day_type, act_data, mean)
install.packages("ggplot2")
library(ggplot2)
qplot(interval, steps, data=new_interval_imputation, geom=c("line"), xlab="Interval",
ylab="Steps", main="") + facet_wrap(~ day_type, ncol=1)
qplot(interval, steps, data=new_interval_imputation, geom=c("line"), xlab="Interval",
ylab="Steps", main="") + facet_wrap(~ day_type, ncol=1)
source('~/.active-rstudio-document', echo=TRUE)
